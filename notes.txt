https://github.com/thinkcodegravity/javamar.git

calculator Program
	information/data = stored in MEMORY
		number 1 : 250
		number 2 : 3
		
	instruction = followed by CPU 
	multiply
		take number 1 and add it to itself "number 2" times
		250 + 250 + 250
	Hexa = 6	
0-9 = 10 possible values
A-F = 6 additional possible

AAB
11 11 12 

JDK = Compiler + interpreter(JVM)
JRE = Interpreter(JVM)

Program
	(src)source code : human readable program
		programs with extension .java

	COMPILER= converts a source code into binary code

	(bin)binary code : Machine readable program
		programs with extension .class /.exe /.bat etc



Object oriented programming
Most closely realtable at real world
	Modular/distributed approach
	rocket
		has -a : fuel tank, exhcuation chamber, cock pit
		does : fly, land
	
Procedure oriented programming
	fly = 
	C program

Rocket
	fly
	

BankAccount
	money, customername, deposit, withdraw,
	account number, account type
	
	has-a : money, customername,acountnumber, type
	does-a : deposit, withdraw
	
	
Person
	(made of attribute)has-a : leg, hands,mouth
	(actions) does-a : walk,eat, talk
	
stone
	has-a : color, mineral, shape, weight
	does : throw it
	
facebookAccount
	has-a : name,status, friends, picture, video 
	does : chat, post, like, addFriends, signout, login
	
	
	
	
	
Programs
	has-a : attributes
	does-a : activity

Programs
	information
	process Information - instruction on how to process information

Machines/devices
	memory
	cpu - process instruction
	

uid/pwd login
shopping
credit payment
crypto payment
facial recog
fingerprint scan
product
iphone
gmail login
samsung
login
payment

Iphone IS-A Product
uid/pwd login IS-A Login
facial recog IS-A Login
fingerprint scan IS-A Login
credit pay IS-A Payment

Iphone inherits from Product
UIDPwdLogin inherits from Login
FacialRecog inherits from Login


Iphone 10 = 14 feature
Iphone 11 = 15 features

Reusability

payment
	credit
	debit
	paypal
	crypto
	
Payment
	collects shipping address
	collect email and phone for promotoinal offers
		
Credit inherits Payment	
	code to transfer credit card
debit inherits Payment	
	code to transfer debit card
paypal inherits Payment	
crypto inherits Payment	
	
	
	
libraries - composition - HAS-A relationship
	library program has functionality that accepts
		crypto wallet
inheritrance - IS-A relationship
	
	

BankAccount
	Variable/has-A = balance, customerName, accountNumber, accountType,
		customerAddress
	*********** 
	What is the data-type of value you would store
		Simple/Primitive data type = single valued information
			number	= byte, short, int, long
			fraction number = float, double
				float amazonProductPrice; 99.99 cent smallest fraction of $
				
			1 character = char
			Yes/no answer = boolean
		
		Complex/Object data type = has sub information
			group of characters = String
			complex = create another program <anotherprogram> (has-a exercise)
				anotherprogram attribute_name=new anotherprogram();
	*********** 
	int balance;
	String customerName;
	long accountNumber;
	String accountType;
	customerAddress
		int streetNumber;
		String streetName;
		short aptNumber;
		String city;
		String state;
		int zip;
		String country;
	99999
		
	byte = 1 byte in memory		-128 to 127
	short = 2 bytes 			-32768 to 32767
	int = 4 bytes				-2billion to 2 billion
	long = 8 bytes				millions of trilliions
	
	2234567890
	FB software - 4 billion customers
	int MonthOfbirth; = 16GB = 4 billion times 4 byte(int)
	byte MonthOfbirth; = 4GB = 4 billion times 1 byte(byte)
	
	
	
	

computer device
	Memory = store information
	CPU = processing information
	
bankAccount Program
	(Memory) has-A : money, account number
	(CPU) does-A : withdraw, deposit
	
	
BankAccount
	HAS-A
	balance=100
	account =1234
	
	DOES-A
	withdraw ( 10 )
		LOGIC
		deduct the above amount from balance. 90
	deposit ( 20)
		LOGIC
		add teh above amount to balance. 120
	
	
bankAccount Program
	VARIABLE : something that changes
	(Memory) has-A : balance, account number
	(CPU) does-A : withdraw, deposit




conditional AND
true and true = true
true and false = false
false and true = false 
false and false = false

LHS or RHS can be a boolean variable or operator that provides boolean output
							( equality/ relational )

conditional OR
true or true = true
true or false = true
false or true = true
false or false = false


1+2-3*4 = 0 left to right
1+2-3*4 = 11 right to left

operator priority or precedence
1) ()
2) * / 
3) + -
4) relational > < 
5) equality == !=
6) && ||
7) if u have more than 1 operators on same level ( left to right )

1 * (2 + 3 )  > 5 && 4 / (3-1 ) == 2
1 * 5   > 5 && 4 / (3-1 ) == 2
1 * 5   > 5 && 4 / 2 == 2
5   > 5 && 4 / 2 == 2
5   > 5 && 2 == 2
false && 2 == 2
false && true
false

operator priority or precedence
1) ()
2) * / %
3) + -
4) if u have more than 1 operators on same level ( left to right )

(1+2) * 5 - ( 4 -2) * 2 / 2
3 * 5 - ( 4 -2) * 2 / 2
3 * 5 - 2 * 2 / 2
15  - 2 * 2 / 2
15  - 4 / 2
15  - 2
13



BankAccount
	****HAS-A****
	balance=100
	account =1234
	
	****DOES-A****
	withdraw ( 10 )
		****LOGIC****
		deduct the above amount from balance. 90
		USES OPERATORS AND CONTROL FLOWS


for ( initialization ; condition check ; modification ){
	// Execute repetetive block of code
}
// infinite loop
for ( int i=0; i>20 ; i++){
	sysout("hi");
}

for ( int i=0; i<5 ; i++){
	sysout("begin");
	if (i==2)
		break;
	sysout("end");
}

Continue : moves on/continue with next loop. 
	skips all remaining line in current loop.
Break : EXIT loop

ICE	:	i=0 , true, print begin. print end
MCE 	:	i=1 , true, print begin. print end
MCE 	:	i=2 , true, print begin.
MCE 	:	
MCE 	:

FOR : fixed number of loops
WHILE : 0 or more loops
	shopping add 2 cart
DO-WHILE : 1 or more loops
	ATM
	
while(condition check){
	
}
do{
	
}while(condition check);

int sw=5000000;
if( sw==1 )
	System.out.println("inside 1 case");
else if( sw==2)
	System.out.println("inside 2 case");
else if( sw==3)
	System.out.println("inside 3 case");
.......
else if( sw==1000000)
	System.out.println("inside 4 case");
else
	System.out.println("dfault case");

int sw=500000;
switch(sw) {
	case 1:
		System.out.println("inside 1 case");
		break;
	case 2:
		System.out.println("inside 2 case");
		break;
	case 3:
		System.out.println("inside 3 case");
		break;
	........
	case 1000000:
		System.out.println("inside 4 case");
		break;
	default:
		System.out.println("default case");
		break;
		
}

if-else is slow in performance
	
when to use switch case
	when comparing int like primitive data, string value
when to use if-else
	when required multiple conditino check, 
	when required conditional or relational operator
	
		


Backward Compatibility = 1.8 
IIphone
	public void call();
	public void text();
	public void browse();
	default void map()// default method is the solution for backward compatibility
	{
		asdasdasdas
	}
	// default created new problem.. diamond problem is back
Iphone implements IIphone == 
	public void call(){
		sdfdsf
	}
	public void text(){
		sdfsdf
	}
	public void browse(){
		sdfsdf
	}
Iphone3 extends Iphone == incomplete program , crash, error
	public void camera(){
		adads
	}
Iphone6 extends Iphone == incomplete program , crash, error
	public void fingerprintScan(){
		adads
	}
Iphonex extends Iphone == incomplete program , crash, error
	public void facialRecognition(){
		adads
	}
FORWARD LOOKING EVOLUTION



Nissan Altima Model S : 20,000$
	doors,windows,seat,AC,Engine
Nissan Altima Model SV : 22,000$
	doors,windows,seat,AC,Engine,Music player
Nissan Altima Model SR : 24,000$
	doors,windows,seat,AC,Engine,Music player, Parking Sensors
Nissan Altima Model Platinium :  28,000$
	doors,windows,seat,AC,Engine,Music player, Parking Sensors, LCD display Screen


Manufacturing Option 1 :
	4 Big manufacturing factories. 1 for each model
	Issues :
		If need any new feature for all model.. like new headlights
			additional investment for new feature in all 4 big factories
			additional labors in all 4 factories
		If need to modify existing features.. like more safer windows in all Cars
			Alterations in window feature in all 4 big factories
			additional labors training in all 4 factories

Manufacturing Option 2 : GENERALIZATION
	1 Big manufacturing factories. that builds all the COMMON features in all models
	3 small factories for specific add-ons like music, parking sensors and lcd display screen
	
	Solution:
		If need any new feature for all model.. like new headlights
			additional investment for new feature in all 4 big factories
			NEED TO MAKE CHANGES IN 1 FACTORY ONLY
			additional labors in all 4 factories
			NEED LABORS IN 1 FACTORY ONLY
		If need to modify existing features.. like more safer windows in all Cars
			Alterations in window feature in all 4 big factories
			NEED TO MODIFY WINDOW ASSEMBLY IN 1 FACTORY ONLY
			additional labors training in all 4 factories
			NEED TO RE-TRAIN LABORS IN 1 FACTORY ONLY
	
	
	
public interface IPayment {
	public void collectShippingAddress();
	public void collectContactInfo();
	public void payment();
	public void subscription();
}

public class CreditCard implements Ipayment{
	public void collectShippingAddress(){
		adssadasd
	}
	public void collectContactInfo(){
		collect phone & email
	}
	public void payment(){
		adssadasd
	}
	public void subscription(){
		sdsdf
	}
}
public class Paypal implements Ipayment{
	public void collectShippingAddress(){
		adssadasd
	}
	public void collectContactInfo(){
		collect phone & email
	}
	public void payment(){
		adssadasd
	}

	public void subscription(){
		sdsdf
	}

}
public class Crypto implements Ipayment{
	public void collectShippingAddress(){
		adssadasd
	}
	public void collectContactInfo(){
		collect phone & email
	}
	public void payment(){
		adssadasd
	}

	public void subscription(){
		sdsdf
	}

}
public class Cash implements Ipayment{
	public void collectShippingAddress(){
		adssadasd
	}
	public void collectContactInfo(){
		collect phone & email
	}
	public void payment(){
		adssadasd
	}

	public void subscription(){
		sdsdf
	}
}



****************** abstract (generalization) **************




public interface IPayment {
	public void collectShippingAddress();
	public void collectContactInfo();
	public void payment();
	public void subscription();
}
public abstract class APayment implements IPayment{
	public void collectShippingAddress(){
		aasdsad
	}
	public void collectContactInfo()[
		phone & email
	}
	public void subscription(){
		asdsadad
	}
}
public class CreditCard extends Apayment{
	public void payment(){
		adssadasd
	}
}
public class Paypal extends Apayment{
	public void payment(){
		adssadasd
	}
}
public class Crypto extends Apayment{
	public void payment(){
		adssadasd
	}
}
public class Cash extends Apayment{
	public void payment(){
		adssadasd
	}
}
public class DebitCard etends Apyament{
	public void payment(){
		debit card payment
	}
}




Student s=new Student();
BankAccount b=new BankAccount();

IPayment > APayemnt > CreditCard/Crypto/Debit
IIphone > AIphone > Iphone3/Iphone4/IphoneX

LHS and RHS same inheritance chain
RHS has to be concrete program
RHS should be child of LHS

IIphone iip=new CreditCard()// NO because not from same inheritance
IIphone iip=new AIphone()// NO beacuse same chain but RHS not concrete
IIphone iip=new Iphone3
IIphone iip=new Iphone4
IIphone iip=new IphoneX


******************** 2 programs communicate/connect with each other *******

HAS-A relationship = reference variable created
IS-A relationship = inheritnace link
	Iphonex is-a iphone // correct... iphone is parent of IphoneX
	Iphonex is-a Nissan // wrong... no inheritnace link
	public class IphoneX extends Iphone{
	
	}

	Nissan is-A Engine // Wrong... no inheritnace
	Nissan has-A Engine// correct
	
	public class Nissan{
		Engine e=new Engine
		Wheel w=new Wheel
		Seats s=new Seats
	}




**************** access privilege ********

packages : organize code 


www.amazon.com

com.amazon.www.login
	login.java
	register.java
	forgotUserid.java		
com.amazon.www.shopping
	
	public class add2Cart{
		checkOut co=new checkOut();
	}
	
	import com.amazon.www.payment.Credit;
	public class checkOut{
		Credit c=new Credit.java
	}	
com.amazon.www.payment
	credit.java
	Crypto.java
amazon.ios.shopping
amazon.android.shopping


has-a = reference variables
is-a = extends inheritnace

package1 accessAndPoly.samePack
	Parent.java
	Child1 IS-A Parent
	Other1 HAS-A Parent

package2 accessAndPoly.differentPack
	Child2 IS-A Parent
	Other2 HAS-A Parent


access privleges - variable/methods and constructors

Payment ( String creditCardNum, String exp,String secCode)
Payment ( String payPalUserid,String password)
Payment ( String cryptoWallet)

polymorphism : many forms
Doing ssame thing in multiple ways


CompileTime polymorphism - OverLOADED method
	you know the method being called during compile time
	payment("asd","asd"); // 2 method is being called
	1) method name should be same
	2) input should be different
	3) can happen in same program or between parent and child program
	
Runtime polymorphism - OVERRIDING method
	WHEN TO
		If child program has better solution for a method than parent program
	HOW TO
	you know the method being called only in run time
	1) method name should be same
	2) input should be same
	3) can happen between parent and child program
	
New rule for assignmennt = operator
	LHS and RHS same inheritance chain
	RHS has to be concrete program
	RHS should be child of LHS

New rule for method call
	we can pass any variable that is in same inheritnace chain
	and is a child of target data type

Car > BasicCar > Nissan/Ferrari
Iphone > Iphone3> IphoneX

Car car=new Car();
Nissan n=Nissan();
Ferrari f=new Ferrari();
IphoneX ix=new IphoneX();

test(car, 10); // any variable of same type
test(n,10); // n is Nissan data type.. 1) Nissan is in same inheritnace chain
			2) as Car... Nissan is the child of Car
public void test(Car c,int b){

}

instanceof operator can be used to find the real instance passed in runtime.

******************STATIC**********************

class members - variable and methods					
************** When To *************					
if a variable information is common or need to be shared declare as static					
If a method does NOT access any other non static member of the class					
************** access limitation **************					
static member can use another static member					
*************************************					
DO NOT CREATE REFERENCE TO ACCESS STATIC VARIABLE OR METHODS					
*****************************************					
					
					
****************** FINAL ***********************

Final = Unchageable (OOP concept killer)

Variable = something that changes
	final int a=10; // u cannot change value
	public class company{
		final String name="amazon";
		public void method(){
			name="garbage company";
		}
	}
Method = overriding Polymorphism
	overriding = allows u to provide better solution to a method 
		than your parent class ( CHANGING PARENT's METHOD)
		
	// 1 ,5
	// 1 + 5 = 6
	// PERFECT SOLUTION FOR ADDING 2 NUMBERS
	// AND IT WILL NEVER CHANGE IN FUTURE		
	public final int add(int a, int b)// no more polymorphism ( change solution)
	{
		
	}
Class = helps with inheritance (reusability)
	if the entire program has perfect solution in each method... dclared entire class as final
	public final class calculator// u cannot inherit

JDK Library programs provided to us such as String, System, ArrayList
they are Final.. java founders doesnt wish to change these programs by us.



int num1; // default value 0
int num2;
int num3;

String name1; // default value null
String name2;
String name3;

// create 5 int variables with just declaration (no initialization = default value applies)
int [] numbers=new int[5];

int numbers0;
int numbers1;
int numbers2;
int numbers3;
int numbers4;


FacebookCustomer[] allCustomers=new FacebookCustomer[10];
		
FacebookCustomer allCustomers0; null
FacebookCustomer allCustomers1; null
FacebookCustomer allCustomers2; null
FacebookCustomer allCustomers3;
FacebookCustomer allCustomers4;
FacebookCustomer allCustomers5;
FacebookCustomer allCustomers6;
FacebookCustomer allCustomers7;
FacebookCustomer allCustomers8;
FacebookCustomer allCustomers9;




************** Exception handling ****************

Exception handling provides Programs with ability to recover/take actions
in the event of a failure

Developers
	Need the insight on where / what caused the failure
	Need ability to provide series of steps to fix the problems
	
Customers :
	Customer need not be shown a technical error message in the event of failure
	need to provide a simple error message or instructions that could be used to
	take appropriate actions to fix the failure.

Program failure Category :
	Exception : programming mistake , logical flaw in programming. these can be easily recovered.
	Error : SEVERE. cannot recover. 
	
Exception program heirarchy

Exception handling blocks
try = 
catch
finally

try catch
try finally
try catch catch
try catch catch finally




multiple catch blocks
ATM
	try{
		swipe your card... atm card is damged
		please enter 4 digit pin...  pin is wrong
		enter withdraw amount... enough bank balance
	}
	catch(invalidPinFailure){
		please check your pin and try again
	}
	catch(invalidCardFailure){
		please dial 1800 nummber and rquest for new card
	}
	catch(insufficientFundFailure){
		please withdraw amount within your balance
	}
	catch(UnknownFailure){
		sorry for the inconvienince please try again later
	}
	finally{
		thank you for using java bank
	}
	
try-catch = way to handle the potential failure YOURSELF
throws = way to let SOMEONE ELSE handle the failure
	Program/line that calls this method




java.io.IOException: The system cannot find the path specified..   WHAT IS THE PROBLEM ???
	at arraysAndExcceptions.TestExce.method3(TestExce.java:20) WHERE DID it HAPPEN ???
	at arraysAndExcceptions.TestExce.method2(TestExce.java:14)
	at arraysAndExcceptions.TestExce.method1(TestExce.java:9)
	at arraysAndExcceptions.ExceptionTest2.main(ExceptionTest2.java:11) WHERE IT BEGAN ???




User defined exceptions
program might HAVE TO fail because of Business limitations

// int range = from -2 billion to +2billion
int bankBalance=100;
int withdrawAmount=200;

bankBalance=bankBalance-withdrawAmount;
100-200=   -100
NO TECHNICAL LIMITATION
but BANK BUSINESS DOES NOT WANT TO ALLOW
NEGATIVE NUMBER IN BANK BALANCE






